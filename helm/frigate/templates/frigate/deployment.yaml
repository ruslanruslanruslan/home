apiVersion: apps/v1
kind: Deployment
metadata:
  name: frigate
  namespace: {{ .Release.Namespace }}
  labels:
    app: frigate
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frigate
  template:
    metadata:
      labels:
        app: frigate
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - kube03
      volumes:
        - name: config-volume
          configMap:
            name: frigate
        - name: config
          persistentVolumeClaim:
            claimName: home-frigate-amur-config
        - name: media
          persistentVolumeClaim:
            claimName: home-frigate-amur-media
      initContainers:
        - name: copyconfig
          image: ghcr.io/blakeblackshear/frigate:stable
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /config.yml
              subPath: config.yml
              name: config-volume
            - mountPath: /config
              name: config
          command: [ "cp" ]
          args: [ "-v", "/config.yml", "/config/config.yml" ]
      containers:
        - name: frigate
          image: ghcr.io/blakeblackshear/frigate:stable
          imagePullPolicy: Always
          securityContext:
            privileged: true
          volumeMounts:
          - name: config
            mountPath: /config
          - mountPath: /media
            name: media
          livenessProbe:
            httpGet:
              path: /
              port: 8971
              scheme: HTTPS
            initialDelaySeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8971
              scheme: HTTPS
            initialDelaySeconds: 20
            failureThreshold: 5
            timeoutSeconds: 10
